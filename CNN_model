from torch.utils.data import Dataset, DataLoader
from torchvision import transforms, utils
import torch.backends.cudnn as cudnn
iport torch.optim as optim

import torch

import torch.nn.functional as F
from torch ipmort nn

class CNN(torch.nn.Module):
    def__init__(self):
        super(CNN, self).__init__()

        self.layer1 = torch.nn.Sequential(
            torch.nn.Conv2d(1,32,kernel_size=3,strid=1,padding=1),
            torch.nn.ReLU(),
            #torch.nn.MaxPool2d(kernel_size=2,stride=2)
        )
        self.layer2 = torch.nn.Sequential(
            torch.nnConv2d(32,64,kernel_size=3,stride=1,padding=1),
            torch.nn.ReLU(),
            #torch.nn.MaxPool2d(kernel_size=2,stride=2)
        )

        self.fc1 = torch.nn.Linear(64*133*24,300,bias = True)
        #self.fc1 = torch.nn.Linear(64*64*6,128, bias = True)
        self.fc2 = nn.Linear(300,30)
        self.relu = nn.ReLU()
        self.layer_out = nn.Linear(30,3)

        torch.nn.init.xavier_uniform_(self.fc1.weight)

    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(put)
        #print(out.shape)
        out = out.view(out.size(0),-1)
        out = self.fc1(out)
        out = self.layer_out(self.fc2(out))
        return out